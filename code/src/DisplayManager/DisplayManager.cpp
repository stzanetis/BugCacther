#include "DisplayManager.h"

static const unsigned char bluetooth_available[] = {
  0xe0,0x03,0x18,0x0c,0x84,0x10,0x82,0x21,0x92,0x22,0xa1,0x44,0xc1,0x42,0x81,
  0x41,0xc1,0x42,0xa1,0x44,0x92,0x22,0x82,0x21,0x84,0x10,0x18,0x0c,0xe0,0x03
};
static const unsigned char bluetooth_connected[] = {
  0xe0,0x03,0xf8,0x0f,0x7c,0x1f,0x7e,0x3e,0x6e,0x3d,0x5f,0x7b,0x3f,0x7d,0x7f,
  0x7e,0x3f,0x7d,0x5f,0x7b,0x6e,0x3d,0x7e,0x3e,0x7c,0x1f,0xf8,0x0f,0xe0,0x03
};
static const unsigned char wifi_available[] = {
  0xe0,0x03,0x18,0x0c,0x04,0x10,0x02,0x20,0xf2,0x27,0xf9,0x4f,0x05,0x50,0xf1,
  0x47,0x09,0x48,0xe1,0x43,0x12,0x24,0xc2,0x21,0xc4,0x11,0x18,0x0c,0xe0,0x03
};
static const unsigned char wifi_connected[] = {
  0xe0,0x03,0xf8,0x0f,0xfc,0x1f,0xfe,0x3f,0x0e,0x38,0x07,0x70,0xfb,0x6f,0x0f,
  0x78,0xf7,0x77,0x1f,0x7c,0xee,0x3b,0x3e,0x3e,0x3c,0x1e,0xf8,0x0f,0xe0,0x03
};
static const unsigned char humidity_icon[] = {
  0x20,0x00,0x20,0x00,0x30,0x00,0x70,0x00,0x78,0x00,0xf8,0x00,0xfc,0x01,0xfc,
  0x01,0x7e,0x03,0xfe,0x02,0xff,0x06,0xff,0x07,0xfe,0x03,0xfe,0x03,0xfc,0x01,
  0xf0,0x00
};
static const unsigned char temperature_icon[] = {
  0x38,0x00,0x44,0x40,0xd4,0xa0,0x54,0x40,0xd4,0x1c,0x54,0x06,0xd4,0x02,0x54,
  0x02,0x54,0x06,0x92,0x1c,0x39,0x01,0x75,0x01,0x7d,0x01,0x39,0x01,0x82,0x00,
  0x7c,0x00
};
static const unsigned char flipper_image[] = {
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x7f,0x00,0x00,0x00,0x00,
  0x00,0x00,0x0c,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x06,0x00,0x00,
  0x00,0x00,0x80,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x10,0x00,
  0x00,0x00,0x00,0x20,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x20,
  0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x08,0xf0,0x00,
  0x40,0x78,0x00,0x00,0x00,0x08,0x08,0x01,0x80,0x86,0x00,0x00,0x00,0x04,0xf4,
  0x02,0x80,0x01,0x01,0x00,0x00,0x04,0xba,0x05,0x60,0x00,0xc1,0x01,0x00,0x04,
  0x3a,0x05,0x18,0xe0,0x41,0xf2,0x00,0x04,0xfa,0x05,0x06,0xf8,0x40,0x0c,0x01,
  0x02,0xfa,0x05,0x00,0x7c,0x40,0x04,0x02,0x02,0xf4,0x03,0x00,0x3f,0x80,0x04,
  0x04,0x02,0x28,0x04,0x80,0x1f,0x80,0x04,0x04,0x02,0x10,0x00,0xc0,0x0f,0x80,
  0x04,0x04,0x02,0x10,0x00,0xe0,0x07,0x00,0x09,0x04,0x02,0x00,0x00,0xf0,0x03,
  0x00,0x31,0x02,0x02,0x00,0x02,0x0c,0xff,0x00,0xc1,0x03,0x02,0x00,0x0c,0x03,
  0x3c,0x01,0x01,0x02,0x02,0x00,0xf0,0xff,0x03,0x01,0x01,0x02,0x02,0x00,0x00,
  0x00,0x00,0x81,0x00,0x02,0x02,0x00,0x00,0x00,0x80,0x80,0x00,0x02,0x02,0x00,
  0x00,0x00,0x70,0x80,0x00,0x02,0x02,0x00,0x00,0x00,0x0c,0x40,0x00,0x02,0x02,
  0x00,0x00,0xfe,0x03,0x40,0x00,0x02,0x02,0x00,0x00,0xf8,0x01,0x20,0x00,0x02,
  0x02,0x00,0x00,0x00,0x01,0x20,0x00,0x02
};

U8G2_SSD1306_128X64_NONAME_F_SW_I2C u8g2(U8G2_R0, SCLPIN, SDAPIN, U8X8_PIN_NONE);

void initDisplay() {
  u8g2.begin();           // Initialize the display
  u8g2.setPowerSave(0);   // Disable power saving mode

  u8g2.setFontMode(1);    // Enable font mode
  u8g2.setBitmapMode(1);  // Enable bitmap mode
}

void stopDisplay() {
  u8g2.clearBuffer();     // Clear the display buffer
  u8g2.sendBuffer();      // Send the buffer to the display
  u8g2.setPowerSave(1);   // Enable power saving mode
}

void displayInfo(void *parameter) {
  DisplayData* data = (DisplayData*)parameter;
  
  while(true) {
    if(*(data->stopDisplayTask)) {
      u8g2.clearBuffer();
      u8g2.sendBuffer();
      
      // Clean up and delete task
      *(data->displayTaskHandle) = NULL;
      *(data->stopDisplayTask) = false;
      vTaskDelete(NULL);
    } else {
      u8g2.clearBuffer();

      u8g2.setFont(u8g2_font_t0_14b_tr);
      u8g2.drawStr(2, 12, "BugCatcher");  // Display title
      u8g2.drawFrame(0, 16, 128, 48);     // Display frame

      // Display Bluetooth status - Fixed pointer access
      if(strcmp(*(data->statusBluetooth), "Connected") == 0) {
        u8g2.drawXBM(110, 0, 15, 15, bluetooth_connected);
      } else if(strcmp(*(data->statusBluetooth), "Enabled") == 0) {
        u8g2.drawXBM(110, 0, 15, 15, bluetooth_available);
      }

      // Display Wi-Fi status - Fixed pointer access
      if(strcmp(*(data->statusWiFi), "Connected") == 0) {
        u8g2.drawXBM(89, 0, 15, 15, wifi_connected);
      } else if(strcmp(*(data->statusWiFi), "Enabled") == 0) {
        u8g2.drawXBM(89, 0, 15, 15, wifi_available);
      }

      // Set new font for status text
      u8g2.setFont(u8g2_font_t0_11b_tr);

      // Display Temperature
      u8g2.drawXBM(74, 20, 16, 16, temperature_icon);
      if(*(data->temperature) != 0) {
        char tempStr[8];
        sprintf(tempStr, "%.1fÂ°C", *(data->temperature));
        u8g2.drawStr(93, 33, tempStr);
      } else {
        u8g2.drawStr(93, 33, "N/A");
      }

      // Draw horizontal line for separation
      u8g2.drawLine(69, 40, 126, 40);

      // Display Humidity
      u8g2.drawXBM(74, 44, 11, 16, humidity_icon);
      if(*(data->humidity) != 0) {
        char humStr[8];
        sprintf(humStr, "%.1f%%", *(data->humidity));
        u8g2.drawStr(93, 56, humStr);
      } else {
        u8g2.drawStr(93, 56, "N/A");
      }

      // Show capture indicator
      static int captureDisplayCounter = 0;
      if(*(data->flagCurrentMeasure)) {
        captureDisplayCounter = 3;
        *(data->flagCurrentMeasure) = false;
      }
      if(captureDisplayCounter > 0) {
        u8g2.drawXBM(5, 32, 62, 31, flipper_image);
        captureDisplayCounter--;
      }

      u8g2.sendBuffer();
      vTaskDelay(1000 / portTICK_PERIOD_MS);
    }
  }
}